import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta
import json
import time

# Import plotly v·ªõi ƒëi·ªÅu ki·ªán
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False
    px = None
    go = None

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Flood Detection System",
    page_icon="üåä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL Backend API
BACKEND_URL = "http://127.0.0.1:8000"

# CSS ƒë·ªÉ l√†m ƒë·∫πp giao di·ªán
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
    }
    .alert-high {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
        padding: 1rem;
        border-radius: 10px;
    }
    .alert-medium {
        background-color: #fff3e0;
        border-left: 5px solid #ff9800;
        padding: 1rem;
        border-radius: 10px;
    }
    .alert-low {
        background-color: #e8f5e8;
        border-left: 5px solid #4caf50;
        padding: 1rem;
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

def check_backend_status():
    """Ki·ªÉm tra backend c√≥ ho·∫°t ƒë·ªông kh√¥ng"""
    try:
        response = requests.get(f"{BACKEND_URL}/", timeout=5)
        return response.status_code == 200
    except:
        return False

def get_sensor_data():
    """L·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ backend"""
    try:
        response = requests.get(f"{BACKEND_URL}/sensors/data", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []

def send_chat_message(message):
    """G·ª≠i tin nh·∫Øn t·ªõi chatbot"""
    try:
        response = requests.post(
            f"{BACKEND_URL}/chat/",
            json={"prompt": message},
            timeout=10
        )
        if response.status_code == 200:
            return response.json().get("reply", "Kh√¥ng c√≥ ph·∫£n h·ªìi")
        return "L·ªói k·∫øt n·ªëi chatbot"
    except:
        return "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi chatbot. Vui l√≤ng ki·ªÉm tra backend."

def generate_mock_data():
    """T·∫°o d·ªØ li·ªáu gi·∫£ ƒë·ªÉ demo"""
    import random
    from datetime import datetime, timedelta
    
    data = []
    base_time = datetime.now() - timedelta(hours=24)
    
    for i in range(24):
        timestamp = base_time + timedelta(hours=i)
        water_level = round(random.uniform(0.5, 3.0), 2)
        temperature = round(random.uniform(20, 35), 1)
        humidity = round(random.uniform(60, 90), 1)
        
        data.append({
            "id": i + 1,
            "water_level": water_level,
            "temperature": temperature,
            "humidity": humidity,
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "location": f"C·∫£m bi·∫øn {(i % 3) + 1}"
        })
    
    return data

def get_alert_level(water_level):
    """X√°c ƒë·ªãnh m·ª©c ƒë·ªô c·∫£nh b√°o"""
    if water_level >= 2.5:
        return "Nguy hi·ªÉm", "üî¥", "alert-high"
    elif water_level >= 1.8:
        return "C·∫£nh b√°o", "üü°", "alert-medium"
    else:
        return "An to√†n", "üü¢", "alert-low"

# Main app
def main():
    # Header
    st.markdown('<h1 class="main-header">H·ªá th·ªëng Gi√°m s√°t L≈© l·ª•t IoT</h1>', unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title(" ƒêi·ªÅu khi·ªÉn")
    
    # Ki·ªÉm tra backend
    backend_status = check_backend_status()
    if backend_status:
        st.sidebar.success(" Backend ƒëang ho·∫°t ƒë·ªông")
    else:
        st.sidebar.error(" Backend kh√¥ng ho·∫°t ƒë·ªông")
    
    # Menu ch√≠nh
    page = st.sidebar.selectbox(
        "Ch·ªçn ch·ª©c nƒÉng:",
        ["Dashboard", "Chatbot", " Bi·ªÉu ƒë·ªì", "C√†i ƒë·∫∑t"]
    )
    
    if page == "Dashboard":
        show_dashboard()
    elif page == "Chatbot":
        show_chatbot()
    elif page == "Bi·ªÉu ƒë·ªì":
        show_charts()
    elif page == "C√†i ƒë·∫∑t":
        show_settings()

def show_dashboard():
    """Hi·ªÉn th·ªã dashboard ch√≠nh"""
    st.subheader("B·∫£ng ƒëi·ªÅu khi·ªÉn t·ªïng quan")
    
    # L·∫•y d·ªØ li·ªáu (th·ª≠ t·ª´ backend, n·∫øu kh√¥ng c√≥ th√¨ d√πng mock data)
    sensor_data = get_sensor_data()
    if not sensor_data:
        sensor_data = generate_mock_data()
    
    if sensor_data:
        # L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
        latest_data = sensor_data[-1] if sensor_data else {}
        
        # Metrics row
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            water_level = latest_data.get('water_level', 0)
            alert_text, alert_icon, alert_class = get_alert_level(water_level)
            st.metric(
                label="M·ª±c n∆∞·ªõc hi·ªán t·∫°i", 
                value=f"{water_level}m",
                delta=f"{alert_icon} {alert_text}"
            )
        
        with col2:
            temp = latest_data.get('temperature', 0)
            st.metric(
                label="Nhi·ªát ƒë·ªô", 
                value=f"{temp}¬∞C"
            )
        
        with col3:
            humidity = latest_data.get('humidity', 0)
            st.metric(
                label="ƒê·ªô ·∫©m", 
                value=f"{humidity}%"
            )
        
        with col4:
            st.metric(
                label="C·∫£m bi·∫øn ho·∫°t ƒë·ªông", 
                value="3/3",
                delta="T·∫•t c·∫£ online"
            )
        
        # C·∫£nh b√°o
        st.subheader("T√¨nh tr·∫°ng c·∫£nh b√°o")
        alert_text, alert_icon, alert_class = get_alert_level(water_level)
        
        alert_html = f"""
        <div class="{alert_class}">
            <h3>{alert_icon} M·ª©c c·∫£nh b√°o: {alert_text}</h3>
            <p>M·ª±c n∆∞·ªõc hi·ªán t·∫°i: <strong>{water_level}m</strong></p>
            <p>Th·ªùi gian c·∫≠p nh·∫≠t: <strong>{latest_data.get('timestamp', 'N/A')}</strong></p>
        </div>
        """
        st.markdown(alert_html, unsafe_allow_html=True)
        
        # B·∫£ng d·ªØ li·ªáu g·∫ßn ƒë√¢y
        st.subheader("D·ªØ li·ªáu c·∫£m bi·∫øn g·∫ßn ƒë√¢y")
        df = pd.DataFrame(sensor_data[-10:])  # 10 d√≤ng g·∫ßn nh·∫•t
        st.dataframe(df, use_container_width=True)
        
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu c·∫£m bi·∫øn")

def show_chatbot():
    """Hi·ªÉn th·ªã chatbot"""
    st.subheader("Tr·ª£ l√Ω AI Flood Support")
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng gi√°m s√°t l≈© l·ª•t. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ t√¨nh h√¨nh m·ª±c n∆∞·ªõc, c·∫£nh b√°o, ho·∫∑c c√°c bi·ªán ph√°p ph√≤ng ch·ªëng l≈© l·ª•t."}
        ]
    
    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Chat input
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Get bot response
        with st.chat_message("assistant"):
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                response = send_chat_message(prompt)
                st.markdown(response)
        
        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": response})
    
    # N√∫t x√≥a l·ªãch s·ª≠ chat
    if st.button(" X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.messages = [
            {"role": "assistant", "content": "L·ªãch s·ª≠ chat ƒë√£ ƒë∆∞·ª£c x√≥a. B·∫°n c√≥ c√¢u h·ªèi g√¨ m·ªõi?"}
        ]
        st.rerun()

def show_charts():
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì"""
    st.subheader("Bi·ªÉu ƒë·ªì v√† Ph√¢n t√≠ch")
    
    # L·∫•y d·ªØ li·ªáu
    sensor_data = get_sensor_data()
    if not sensor_data:
        sensor_data = generate_mock_data()
    
    if sensor_data:
        df = pd.DataFrame(sensor_data)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        # Bi·ªÉu ƒë·ªì m·ª±c n∆∞·ªõc theo th·ªùi gian
        st.subheader("üåä Bi·ªÉu ƒë·ªì m·ª±c n∆∞·ªõc 24h")
        if PLOTLY_AVAILABLE:
            fig_water = px.line(
                df, 
                x='timestamp', 
                y='water_level',
                title='M·ª±c n∆∞·ªõc theo th·ªùi gian',
                labels={'water_level': 'M·ª±c n∆∞·ªõc (m)', 'timestamp': 'Th·ªùi gian'}
            )
            fig_water.add_hline(y=2.5, line_dash="dash", line_color="red", 
                               annotation_text="Nguy hi·ªÉm")
            fig_water.add_hline(y=1.8, line_dash="dash", line_color="orange", 
                               annotation_text="C·∫£nh b√°o")
            st.plotly_chart(fig_water, use_container_width=True)
        else:
            # Fallback: S·ª≠ d·ª•ng line_chart c·ªßa Streamlit
            st.line_chart(df.set_index('timestamp')['water_level'])
            st.info("üî¥ Nguy hi·ªÉm: > 2.5m | üü° C·∫£nh b√°o: > 1.8m | üü¢ An to√†n: < 1.8m")
        
        # Bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üå°Ô∏è Nhi·ªát ƒë·ªô")
            if PLOTLY_AVAILABLE:
                fig_temp = px.line(df, x='timestamp', y='temperature', 
                                 title='Nhi·ªát ƒë·ªô theo th·ªùi gian')
                st.plotly_chart(fig_temp, use_container_width=True)
            else:
                st.line_chart(df.set_index('timestamp')['temperature'])
        
        with col2:
            st.subheader("üíß ƒê·ªô ·∫©m")
            if PLOTLY_AVAILABLE:
                fig_humidity = px.line(df, x='timestamp', y='humidity', 
                                     title='ƒê·ªô ·∫©m theo th·ªùi gian')
                st.plotly_chart(fig_humidity, use_container_width=True)
            else:
                st.line_chart(df.set_index('timestamp')['humidity'])
        
        # Th·ªëng k√™
        st.subheader("üìä Th·ªëng k√™ t·ªïng quan")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.info(f"üåä M·ª±c n∆∞·ªõc trung b√¨nh: {df['water_level'].mean():.2f}m")
        with col2:
            st.info(f"üå°Ô∏è Nhi·ªát ƒë·ªô trung b√¨nh: {df['temperature'].mean():.1f}¬∞C")
        with col3:
            st.info(f"üíß ƒê·ªô ·∫©m trung b√¨nh: {df['humidity'].mean():.1f}%")

def show_settings():
    """Hi·ªÉn th·ªã c√†i ƒë·∫∑t"""
    st.subheader("C√†i ƒë·∫∑t h·ªá th·ªëng")
    
    st.markdown("### C·∫•u h√¨nh Backend")
    new_backend_url = st.text_input("URL Backend:", value=BACKEND_URL)
    
    if st.button("Test k·∫øt n·ªëi"):
        try:
            response = requests.get(f"{new_backend_url}/", timeout=5)
            if response.status_code == 200:
                st.success(" K·∫øt n·ªëi th√†nh c√¥ng!")
                st.json(response.json())
            else:
                st.error(f"L·ªói k·∫øt n·ªëi: {response.status_code}")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi: {str(e)}")
    
    st.markdown("### Th√¥ng tin h·ªá th·ªëng")
    st.info("""
    **Phi√™n b·∫£n:** 1.0.0  
    **C√¥ng ngh·ªá:** Python + Streamlit + FastAPI  
    **T√°c gi·∫£:** GPBL Team  
    **M√¥ t·∫£:** H·ªá th·ªëng gi√°m s√°t l≈© l·ª•t s·ª≠ d·ª•ng IoT v√† AI
    """)

if __name__ == "__main__":
    main()
